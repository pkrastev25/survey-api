// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"context"
	"errors"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"os"
	"survey-api/pkg/auth"
	"survey-api/pkg/logger"
	"survey-api/pkg/pagination"
	"survey-api/pkg/poll"
	"survey-api/pkg/user"
	"time"
)

// Injectors from di.go:

func create() (*Dependencies, error) {
	service := &logger.Service{}
	client, err := createMongodbClient()
	if err != nil {
		return nil, err
	}
	userRepo, err := user.NewUserRepo(client)
	if err != nil {
		return nil, err
	}
	authRepo, err := auth.NewAuthRepo(client)
	if err != nil {
		return nil, err
	}
	tokenService := &auth.TokenService{}
	cookieService := &auth.CookieService{}
	authHandler := auth.NewAuthHandler(userRepo, authRepo, tokenService, cookieService)
	pollRepo, err := poll.NewPollRepo(client)
	if err != nil {
		return nil, err
	}
	paginationMapper := pagination.NewPaginationMapper()
	pollHandler := poll.NewPollHandler(pollRepo, paginationMapper)
	pollPaginationHandler := poll.NewPollPaginationHandler()
	diDependencies := packageDependencies(service, authHandler, tokenService, cookieService, authRepo, userRepo, pollRepo, pollHandler, paginationMapper, pollPaginationHandler)
	return diDependencies, nil
}

// di.go:

type Dependencies struct {
	Logger                *logger.Service
	AuthHandler           *auth.AuthHandler
	TokenService          *auth.TokenService
	CookieService         *auth.CookieService
	AuthRepo              *auth.AuthRepo
	UserRepo              *user.UserRepo
	PollRepo              *poll.PollRepo
	PollHandler           *poll.PollHandler
	PaginationMapper      *pagination.PaginationMapper
	PollPaginationHandler *poll.PollPaginationHandler
}

var dependencies *Dependencies

func init() {
	deps, err := create()
	if err != nil {
		panic(err)
	}

	dependencies = deps
}

func Container() *Dependencies {
	return dependencies
}

func createMongodbClient() (*mongo.Client, error) {
	host := os.Getenv("MONGODB_HOST")
	if len(host) == 0 {
		host = "localhost"
	}

	port := os.Getenv("MONGODB_PORT")
	if len(port) == 0 {
		port = "27017"
	}
	user2 := os.Getenv("MONGODB_USER")
	if len(user2) == 0 {
		return nil, errors.New("MONGODB_USER is not set")
	}

	password := os.Getenv("MONGODB_PASSWORD")
	if len(password) == 0 {
		return nil, errors.New("MONGODB_PASSWORD is not set")
	}

	url := "mongodb://" + host + ":" + port
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	clientOptions := options.Client().ApplyURI(url).SetAuth(options.Credential{
		Username: user2,
		Password: password,
	})
	client, err := mongo.Connect(ctx, clientOptions)
	defer cancel()
	if err != nil {
		return nil, err
	}

	return client, nil
}

func packageDependencies(logger2 *logger.Service,
	authHandler *auth.AuthHandler,
	tokenService *auth.TokenService,
	cookieService *auth.CookieService,
	authRepo *auth.AuthRepo,
	userRepo *user.UserRepo,
	pollRepo *poll.PollRepo,
	pollHandler *poll.PollHandler,
	paginationMapper *pagination.PaginationMapper,
	pollPaginationHandler *poll.PollPaginationHandler,
) *Dependencies {
	return &Dependencies{
		Logger:                logger2,
		AuthHandler:           authHandler,
		TokenService:          tokenService,
		CookieService:         cookieService,
		AuthRepo:              authRepo,
		UserRepo:              userRepo,
		PollRepo:              pollRepo,
		PollHandler:           pollHandler,
		PaginationMapper:      paginationMapper,
		PollPaginationHandler: pollPaginationHandler,
	}
}
